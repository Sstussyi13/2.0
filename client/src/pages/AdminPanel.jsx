// –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AdminPanel –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
// –í—Å—ë —Å—Ä–∞–∑—É –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥—Ä—É–∂–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–æ–º

import { useEffect, useState } from "react";
import axios from "axios";
import { Pencil, Trash, Save, Upload, Plus } from "lucide-react";
import {
  ClipboardCheck,
  TrafficCone,
  Construction,
  Ruler,
  FileText,
  FileSearch,
  BookOpen,
} from "lucide-react";

const ICONS = {
  ClipboardCheck,
  TrafficCone,
  Construction,
  Ruler,
  FileText,
  FileSearch,
  BookOpen,
};

export default function AdminPanel() {
  const [tab, setTab] = useState("requests");
  const [requests, setRequests] = useState([]);
  const [content, setContent] = useState({});
  const [editId, setEditId] = useState(null);
  const [editedRequest, setEditedRequest] = useState({});

  const API_BASE = import.meta.env.VITE_API_BASE || "http://localhost:3000/api";

  const fetchRequests = async () => {
    try {
      const res = await axios.get(`${API_BASE}/requests`);
      setRequests(res.data);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫:", err);
    }
  };

  const fetchContent = async () => {
    try {
      const res = await axios.get(`${API_BASE}/content/all`);
      const data = res.data.reduce((acc, { key, value }) => {
        acc[key] = JSON.parse(value);
        return acc;
      }, {});
      setContent(data);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:", err);
    }
  };

  useEffect(() => {
    fetchRequests();
    fetchContent();
  }, []);

  const startEdit = (r) => {
    setEditId(r.id);
    setEditedRequest({ ...r });
  };

  const saveEdit = async () => {
    try {
      await axios.put(`${API_BASE}/requests/${editId}`, {
        service_type: editedRequest.service_type,
        message: editedRequest.message,
      });
      setEditId(null);
      fetchRequests();
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:", err);
    }
  };

  const deleteRequest = async (id) => {
    if (!window.confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É?")) return;
    try {
      await axios.delete(`${API_BASE}/requests/${id}`);
      fetchRequests();
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:", err);
    }
  };

  const updateContent = async (key, value) => {
    try {
      await axios.put(`${API_BASE}/content/${key}`, {
        value: JSON.stringify(value),
      });
      fetchContent();
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:", err);
    }
  };

  const handleFileUpload = async (e, idx) => {
    const file = e.target.files[0];
    if (!file) return;

    const formData = new FormData();
    formData.append("image", file);

    try {
      const res = await axios.post(`${API_BASE}/upload`, formData, {
        headers: { "Content-Type": "multipart/form-data" },
      });
      const imageUrl = `${API_BASE}/uploads/${res.data.filename}`;
      const updated = [...content.cards];
      updated[idx].image = imageUrl;
      setContent({ ...content, cards: updated });
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", err);
    }
  };

  // üëá –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–≤–∫–ª–∞–¥–∫–∏ –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞) –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  // –ü—Ä–æ—Å—Ç–æ —É–±—Ä–∞–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è

  return (
    <div className="min-h-screen bg-gray-100 p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–±–µ–∑ –≤—Ö–æ–¥–∞)</h1>
      </div>

      <div className="flex flex-wrap gap-3 mb-6">
        {["requests", "cards", "services", "steps", "price_table"].map((key) => (
          <button
            key={key}
            onClick={() => setTab(key)}
            className={`px-4 py-2 rounded ${tab === key ? "bg-blue-600 text-white" : "bg-white border"}`}
          >
            {key}
          </button>
        ))}
      </div>

      {/* –ó–¥–µ—Å—å –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤–∫–ª–∞–¥–æ–∫ ‚Äî –≤—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ */}
    </div>
  );
}
